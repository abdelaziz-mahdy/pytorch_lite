// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class PyTorchRect {
  PyTorchRect({
    required this.left,
    required this.top,
    required this.right,
    required this.bottom,
    required this.width,
    required this.height,
  });

  double left;

  double top;

  double right;

  double bottom;

  double width;

  double height;

  Object encode() {
    return <Object?>[
      left,
      top,
      right,
      bottom,
      width,
      height,
    ];
  }

  static PyTorchRect decode(Object result) {
    result as List<Object?>;
    return PyTorchRect(
      left: result[0]! as double,
      top: result[1]! as double,
      right: result[2]! as double,
      bottom: result[3]! as double,
      width: result[4]! as double,
      height: result[5]! as double,
    );
  }
}

class ResultObjectDetection {
  ResultObjectDetection({
    required this.classIndex,
    this.className,
    required this.score,
    required this.rect,
  });

  int classIndex;

  String? className;

  double score;

  PyTorchRect rect;

  Object encode() {
    return <Object?>[
      classIndex,
      className,
      score,
      rect.encode(),
    ];
  }

  static ResultObjectDetection decode(Object result) {
    result as List<Object?>;
    return ResultObjectDetection(
      classIndex: result[0]! as int,
      className: result[1] as String?,
      score: result[2]! as double,
      rect: PyTorchRect.decode(result[3]! as List<Object?>),
    );
  }
}

class _ModelApiCodec extends StandardMessageCodec {
  const _ModelApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PyTorchRect) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ResultObjectDetection) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PyTorchRect.decode(readValue(buffer)!);
      case 129: 
        return ResultObjectDetection.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ModelApi {
  /// Constructor for [ModelApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ModelApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _ModelApiCodec();

  Future<int> loadModel(String modelPath, int? numberOfClasses, int? imageWidth, int? imageHeight, int? objectDetectionModelType) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.loadModel';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[modelPath, numberOfClasses, imageWidth, imageHeight, objectDetectionModelType]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  ///predicts abstract number input
  Future<List<Object?>?> getPredictionCustom(int index, List<double?> input, List<int?> shape, String dtype) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.getPredictionCustom';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[index, input, shape, dtype]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?);
    }
  }

  ///predicts raw image but returns the raw net output
  Future<List<double?>> getRawImagePredictionList(int index, Uint8List imageData) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.getRawImagePredictionList';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[index, imageData]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<double?>();
    }
  }

  ///predicts raw image but returns the raw net output
  Future<List<ResultObjectDetection?>> getRawImagePredictionListObjectDetection(int index, Uint8List imageData, double minimumScore, double IOUThreshold, int boxesLimit) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.getRawImagePredictionListObjectDetection';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[index, imageData, minimumScore, IOUThreshold, boxesLimit]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<ResultObjectDetection?>();
    }
  }

  ///predicts image but returns the raw net output
  Future<List<double?>> getImagePredictionList(int index, Uint8List? imageData, List<Uint8List?>? imageBytesList, int? imageWidthForBytesList, int? imageHeightForBytesList, List<double?> mean, List<double?> std) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.getImagePredictionList';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[index, imageData, imageBytesList, imageWidthForBytesList, imageHeightForBytesList, mean, std]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<double?>();
    }
  }

  ///predicts image but returns the output detections
  Future<List<ResultObjectDetection?>> getImagePredictionListObjectDetection(int index, Uint8List? imageData, List<Uint8List?>? imageBytesList, int? imageWidthForBytesList, int? imageHeightForBytesList, double minimumScore, double IOUThreshold, int boxesLimit) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.pytorch_lite.ModelApi.getImagePredictionListObjectDetection';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[index, imageData, imageBytesList, imageWidthForBytesList, imageHeightForBytesList, minimumScore, IOUThreshold, boxesLimit]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<ResultObjectDetection?>();
    }
  }
}
